<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <author>Ulaganathan Ramesh</author>
        <title>OWASP - Insecure Cryptographic Storage</title>
    </properties>
    <meta name="keyword" content="monitoring, java"/>
    <body>
        <section name="Definition">
       <p>Many web applications check URL access rights before rendering protected links and buttons. However, applications need to perform similar access control checks when these pages are accessed, or attackers will be able to forge URLs to access these hidden pages anyway.</p>
  </section>
  <section name="Sample Attack">
 <p>The attacker simply force browses to target URLs. Consider the following URLs which are both supposed to require authentication. Admin rights are also required for access to the “admin_getappInfo” page.
</p>
<div style="border: 2px dashed rgb(68, 68, 68); background-color: rgb(208, 208, 208); font-family: courier; padding: 4px; margin-left: 20px; margin-right:20px;">http://example.com/app/getappInfo,
http://example.com/app/admin_getappInfo</div>
<p>If the attacker is not authenticated, and access to either page is granted, then unauthorized access was allowed. If an authenticated, non-admin, user is allowed to access the “admin_getappInfo” page, this is a flaw, and may lead the attacker to more improperly protected admin pages.
</p><p>Such flaws are frequently introduced when links and buttons are simply not displayed to unauthorized users, but the application fails to protect the pages they target.
</p>
        </section>
        <section name="How to prevent?">
<p>Preventing unauthorized URL access requires selecting an approach for requiring proper authentication and proper authorization for each page. Frequently, such protection is provided by one or more components external to the application code. Regardless of the mechanism(s), all of the following are recommended:
</p>
<ol><li> The authentication and authorization policies be role based, to minimize the effort required to maintain these policies.
</li><li> The policies should be highly configurable, in order to minimize any hard coded aspects of the policy.
</li><li> The enforcement mechanism(s) should deny all access by default, requiring explicit grants to specific users and roles for access to every page.
</li><li> If the page is involved in a workflow, check to make sure the conditions are in the proper state to allow access.
</li></ol>

        </section>
        <section name="Available APIs">
         <p>
API's not available.
	 </p>
        </section>
    </body>
</document>
