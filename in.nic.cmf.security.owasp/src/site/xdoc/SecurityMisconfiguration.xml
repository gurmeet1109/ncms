<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <author>Ulaganathan Ramesh</author>
        <title>OWASP - Insecure Cryptographic Storage</title>
    </properties>
    <meta name="keyword" content="monitoring, java"/>
    <body>
        <section name="Definition">
       <p>Security depends on having a secure configuration defined for the application, framework, web server, application server, and platform. All these settings should be defined, implemented, and maintained as many are not shipped with secure defaults.</p>
  </section>
  <section name="Sample Attack">
 <div style="color: rgb(79, 129, 189); font-size: 150%;">Example Scenarios</div>
<p><u>Scenario #1</u>: Your application relies on a powerful framework like Struts or Spring. XSS flaws are found in these framework components you rely on. An update is released to fix these flaws but you don’t update your libraries. Until you do, attackers can easily find and exploit these flaws in your app.
</p><p><u>Scenario #2</u>: The app server admin console is automatically installed and not removed. Default accounts aren’t changed. Attacker discovers the standard admin pages are on your server, logs in with default passwords, and takes over.
</p><p><u>Scenario #3</u>: Directory listing is not disabled on your server. Attacker discovers she can simply list directories to find any file. Attacker finds and downloads all your compiled Java classes, which she reverse engineers to get all your custom code. She then finds a serious access control flaw in your application.
</p><p><u>Scenario #4</u>: App server configuration allows stack traces to be returned to users, potentially exposing underlying flaws. Attackers love the extra information error messages provide.
</p>

        </section>
        <section name="How to prevent?">
		<p>The primary recommendations are to establish all of the following:
		</p>
		<ol><li> A repeatable hardening process that makes it fast and easy to deploy another environment that is properly locked down. Development, QA, and production environments should all be configured identically. This process should be automated to minimize the effort required to setup a new secure environment.
		</li><li> A process for keeping abreast of and deploying all new software updates and patches in a timely manner to each deployed environment. This needs to include <u>all code libraries as well</u>, which are frequently overlooked.
		</li><li> A strong application architecture that provides good separation and security between components.
		</li><li> Consider running scans and doing audits periodically to help detect future misconfigurations or missing patches.
		</li></ol>
	
        </section>
        <section name="Available APIs">
         <p>
API's not available
	 </p>
        </section>
    </body>
</document>
